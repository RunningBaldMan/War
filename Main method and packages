package war;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import javax.smartcardio.Card;

import Player.Deck;
import Player.Player;

public class GamePlayApp {
	
	private Player player1; 
	private Player player2;
	private Deck deck; 
	

	private List<String> nameList = List.of("Larry", "Moe", "Curly", "Shemp");
	// create list  of names with dups
	
	private Set<String> playerName = new HashSet<>(nameList);
	//Set to remove duplicates
	
	private Random random = new Random();
	// Randomizes name 

	public static void main(String[] args) {
		new GamePlayApp().run();


	}

	private void run() {
		choosePlayer(); 
		cardShuffle(); 
		createDeck(); 
		dealCards();
		play();
		nameWinner(); 
	
	}

	
	private void nameWinner() {
		if(player1.getScore() > player2.getScore()) { 
			declareWinner(player1);
			declareLoser(player2);
		}
		else if(player2.getScore() > player1.getScore()) {
			declareWinner(player2);
			declareLoser(player1);
		}
		
	}

	private void declareLoser(Player player12) {
		System.out.println(player2 + " is not a good player, and lost the war...");
		
	}

	private void declareWinner(Player player22) {
		System.out.println(player1 + " is the winner!!!");
		
	}

	private void play() {
		while(!player1.hasCards() && !player2.hasCards()) {
			Object card1 = player1.flip();
			Object card2 = player2.flip();
			
			if (card2.getRank() > card1.getRank()) {
				player1.incrementScore();
			} 
			else if (card1.getRank() > card2.getRank()) {
				player2.incrementScore();
			}
			else  {
				declareTie();
			}
		}
	}

	private void declareTie() {
		System.out.println(player1 + " and " + player2 + " need to learn how to play. Neither won the war");
		
	}

	private void dealCards() {
		while(!deck.isEmpty()) {
		player1.draw(deck);
		player2.draw(deck); 
		
		}
	}

	@SuppressWarnings("unused")
	private void createDeck() {
		Collections.shuffle(this.deck);
		
	}

	private void cardShuffle() {
		deck = new Deck(); 
		
		
	}

	private void choosePlayer() {
		List<String> name = new ArrayList<>(playerName);
		player1 = createPlayer(name); 
		player2 = createPlayer(name);
		
		System.out.println("Player 1 is " + player1 + ", and is playing player 2: " + player2 + ".");
				
	}

	private Player createPlayer(List<String> name2) {
		int randomPosition = random.nextInt(name2.size());
		String name = name2.get(randomPosition);
		// Use .get method to get the position of the name
		name2.remove(randomPosition);
		return new Player(name);
	}
	                                    
}
 




///// Player package


package Player;

import war.Card;

@SuppressWarnings("unused")
public class Player {
	
	public class Card {

	}

	private String name;     
	private Hand hand = new Hand();
	@SuppressWarnings("unused")
	private int score = 0;

	public Player(String name) {
		this.name = name;
	}

	public String toString() {
		return name;
	}

	public void draw(Deck deck) {
		hand.add(deck.remove()); 
		
	}

	public Hand getHand() {
		return hand;
	}

	public boolean hasCards() {
		return !hand.isEmpty();
	}

	public Object flip() {
		return hand.remove();
	}

	public void incrementScore() {
		score +=1;
		
	}

	public int getScore() {
		return score;
	}
	
}



//////// Deck package

package Player;

import java.util.LinkedList;
import java.util.List;

@SuppressWarnings("serial")
public class Deck extends LinkedList<Card> {
	private final List<String> value = List.of("2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace");
	
	private final List<String> name = List.of("Hearts", "Diamonds", "Clubs", "Spades");
	
	public Deck() {
		for(String values : value) {
			for (int index = 0; index < value.size(); index++) {
				int rank = index + 1;
				String values1 = value.get(index); 
				Card card = new Card(name, value, rank);
			
				this.add(card);
			}
		}
		
	}
	

}


////////   Card package


package Player; 

import java.util.List;

public class Card {
	


	private List<String> name;
	private List<String> value;
	private int rank;


	public Card(List<String> name, List<String> value, int rank) {
		this.name = name;
		this.value = value;
		this.rank = rank; 
	}
	
	
	@Override
	public String toString() {
		return  value + " of " + name;
	}
	
	public int getRank() {
		return rank;
	}
	
	}
